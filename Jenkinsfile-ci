pipeline {
  agent any

  environment {
    SONARQUBE = 'SonarQube'
    DOCKER_IMAGE = 'vinay4729/primevideo-app:latest'
    SCANNER_HOME = tool 'sonar-scanner'
  }

  tools {
    nodejs 'node18'
    jdk 'jdk-17'
  }

  stages {
    stage('üì• Clone Code from GitHub') {
      steps {
        git branch: 'master',
            credentialsId: 'github-token',
            url: 'https://github.com/vinay4729/primevideo-devsecops-vinay4729'
      }
    }

    stage('üîç SonarQube Code Analysis') {
      environment {
        PATH = "${SCANNER_HOME}/bin:${env.PATH}"
      }
      steps {
        withSonarQubeEnv("${SONARQUBE}") {
          sh 'sonar-scanner -Dsonar.projectKey=prime-video -Dsonar.sources=.'
        }
      }
    }

   stage('üê≥ Docker Build') {
  steps {
    withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
      sh '''
        echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
        docker build -t $DOCKER_IMAGE .
      '''
    }
  }
}

    stage('üõ°Ô∏è Trivy Image Scan') {
      steps {
        sh 'trivy image $DOCKER_IMAGE || true'
      }
    }

    stage('üì§ Push Image to DockerHub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
          sh 'docker push $DOCKER_IMAGE'
        }
      }
    }
  }

  post {
      success {
          echo '‚úÖ CI stages completed successfully.'
      }
      failure {
          echo '‚ùå CI Pipeline marked as failed. This might be due to the optional trigger for the CD pipeline (primevideo-cd) not running or failing.'
          echo 'üîç Note: All CI steps may have passed. Please check logs for exact status.'
      }
  }
}
