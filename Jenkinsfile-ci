pipeline {
  agent any

  environment {
    SONARQUBE = 'SonarQube'                           // Name from Jenkins > Configure System
    DOCKER_IMAGE = 'vinay4729/primevideo-app:latest'  // Change if needed
    SCANNER_HOME = tool 'sonar-scanner'               // Tool name configured in Jenkins
  }

  tools {
    nodejs 'node18'     // Name defined in Jenkins > Global Tool Configuration
    jdk 'jdk-17'
  }

  stages {
    stage('üì• Checkout Code') {
      steps {
        git branch: 'Backup-Branch-1',
            credentialsId: 'github-token',
            url: 'https://github.com/vinay4729/primevideo-devsecops-vinay4729.git'
      }
    }

    stage('üîç SonarQube Code Analysis') {
      environment {
        PATH = "${SCANNER_HOME}/bin:${env.PATH}"
      }
      steps {
        withSonarQubeEnv("${SONARQUBE}") {
          sh 'sonar-scanner -Dsonar.projectKey=primevideo -Dsonar.sources=.'
        }
      }
    }

    stage('üê≥ Docker Build') {
      steps {
        sh 'docker build -t $DOCKER_IMAGE .'
      }
    }

    stage('üõ°Ô∏è Trivy Image Scan') {
      steps {
        sh 'trivy image $DOCKER_IMAGE || true'   // avoid pipeline failure on vuln findings
      }
    }

    stage('üì§ Docker Push') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push $DOCKER_IMAGE
          '''
        }
      }
    }
  }

  post {
    success {
      echo '‚úÖ CI Pipeline completed successfully.'
    }
    failure {
      echo '‚ùå CI Pipeline failed. Check logs for details.'
    }
  }
}

